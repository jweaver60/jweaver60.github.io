<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacob Weaver]]></title>
  <link href="http://jweaver.me/atom.xml" rel="self"/>
  <link href="http://jweaver.me/"/>
  <updated>2014-02-18T14:11:19-05:00</updated>
  <id>http://jweaver.me/</id>
  <author>
    <name><![CDATA[Jacob Weaver]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Task Runners: Grunt vs. Gulp]]></title>
    <link href="http://jweaver.me/blog/2014/02/18/task-runners-grunt-vs-gulp/"/>
    <updated>2014-02-18T13:38:13-05:00</updated>
    <id>http://jweaver.me/blog/2014/02/18/task-runners-grunt-vs-gulp</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been a CodeKit user for a pretty long time, and while it&rsquo;s been very useful, the rise of JavaScript task runners like
Grunt and Gulp have given me a chance to rethink how I automate my workflow. CodeKit is great for compiling SASS/LESS?CoffeeScript,
but what it can&rsquo;t do is more project specific tasks, for example, run my tests. Thanks to Node.js, Grunt and Gulp can do everything
CodeKit can, while also having access to the CLI which allows it to automatically run your tests and perform other tasks.</p>

<p>So that begs the question, Grunt or Gulp? I used Grunt for a while and didn&rsquo;t really see a need to use anything else, it got the
job done. But after I took some time to dig into Gulp, I realized that it was equally powerful but with a much cleaner, more precise
syntax for doing the same things. Let&rsquo;s take the same task, compiling SASS, minifying and concatenating it. In Grunt, that would look
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">sass</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;expanded&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;main.css&#39;</span><span class="o">:</span> <span class="s1">&#39;main.scss&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;widgets.css&#39;</span><span class="o">:</span> <span class="s1">&#39;widgets.scss&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">mincss</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;myproject&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;build/cssoutput.min.css&#39;</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;src/css/file1.css&#39;</span><span class="p">,</span> <span class="s1">&#39;src/css/file2.css&#39;</span> <span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad, but look at how much cleaner all of this can be in Gulp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;assets/styles/scss/app.scss&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifycss</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;assets/styles/min&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s substantially shorter, but how? The answer is in that <code>.pipe</code> method, which allows you to send the result of one task into another.
What this means is that we can put all of our CSS related tasks into one, and just pipe the result of sass compiling into minifying, then minifying
into the destination file. The same is true for JavaScript, images or any other asset. For me, I think it&rsquo;s pretty clear that I&rsquo;ll be using Gulp
as my default task runner for the time being. If you&rsquo;ve been using Grunt, give Gulp a try. I think you&rsquo;ll be surprised by just how much time it can
save you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel is a great framework]]></title>
    <link href="http://jweaver.me/blog/2014/02/16/laravel-is-a-great-framework/"/>
    <updated>2014-02-16T09:28:00-05:00</updated>
    <id>http://jweaver.me/blog/2014/02/16/laravel-is-a-great-framework</id>
    <content type="html"><![CDATA[<p>I recently had to work on a project that required hooking into Magento&rsquo;s SOAP API and parsing orders from an Excel spreadsheet into
the Magento dashboard. Although Magento has a REST API, it doesn&rsquo;t seem to be nearly as capable as the SOAP API, and offers no real
functionality other than the ability to get orders, products, and so on.</p>

<!--more-->


<p>Having never really worked with a SOAP API, I went to my usual
framework (Ruby on Rails) and looked for a SOAP gem. I found <a href="http://savonrb.com/">Savon</a> and thought I would give that a shot. While
Savon works for most applications, something about the way Magento was requiring the request body to be formatted wasn&rsquo;t jiving with
how Savon wanted to format it for me.</p>

<h3>Laravel to the Rescue</h3>

<hr />

<p>I decided that I would have to use PHP for this, since PHP has support for SOAP built right in, and also because all of the examples
Magento gave on their site were for PHP. Creating a soap client in PHP is as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SoapClient</span><span class="p">(</span><span class="s1">&#39;your-wsdl-here&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And from there I was able to use the Magento API as documented. Now this doesn&rsquo;t really pertain to Laravel, just PHP in general. But
where Laravel comes in handy is the rest of the application. I&rsquo;ve attempted to learn Laravel in the past (version 3) and wasn&rsquo;t that
into it. Maybe it was just that I wasn&rsquo;t dedicated to it, but I feel that the framework has come a long way in version 4. Routes and
Controllers are incredibly easy to use, and setting them up in a RESTful way is very simple. For example, if you have a Post resource,
then a simple route like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">resource</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">,</span> <span class="s1">&#39;PostsController&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>will link to a controller and automatically accept standard RESTful actions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;posts.index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;posts.create&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and so on. This made building the rest of my application incredibly easy, and the native SOAP support in PHP was simple to use as well.
I&rsquo;ll be using Laravel on future projects, for sure.</p>
]]></content>
  </entry>
  
</feed>
