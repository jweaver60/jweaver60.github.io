<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacob Weaver]]></title>
  <link href="http://jweaver.me/atom.xml" rel="self"/>
  <link href="http://jweaver.me/"/>
  <updated>2014-02-21T18:12:52-05:00</updated>
  <id>http://jweaver.me/</id>
  <author>
    <name><![CDATA[Jacob Weaver]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keeping a Clean System]]></title>
    <link href="http://jweaver.me/blog/2014/02/21/keeping-a-clean-system/"/>
    <updated>2014-02-21T17:55:31-05:00</updated>
    <id>http://jweaver.me/blog/2014/02/21/keeping-a-clean-system</id>
    <content type="html"><![CDATA[<p>In the process of development, we often end up with a lot of tools on or systems. We install different databases, shells, languages, version control systems, etc. After a while it can be pretty hard to keep up with what&rsquo;s on your system and where, and also what needs to be updated. I wanted to share my method for keeping things up-to-date as simply as possible.</p>

<!-- more -->


<p>The first thing you need to do if you&rsquo;re on OS X and not already doing it, is install everything you possibly can through <a href="http://brew.sh/">homebrew</a>. I use it to install mysql, postgres, git, php, node.js, mongodb, vim, zsh and a bunch of other things. Homebrew does a lot of things for you, installing packages in a single directory and automatically loading them in your PATH (provided you have the homebrew directory in your PATH). The only thing I don&rsquo;t install with homebrew is ruby (there&rsquo;s <a href="http://www.rvm.io">RVM</a> for that). Even if your system already comes with some of these things, installing them with homebrew makes sure you have the latest versions. Homebrew also updates all of your packages with a single command, so you don&rsquo;t have to track these down individually and run multiple updates. If there&rsquo;s an update, homebrew gets it extremely quickly and you&rsquo;ll be up and running with the latest in no time.</p>

<p>I make a habit to update all of my packages every morning when I start work, and to make it even easier I wrote a quick shell script to get everything done in one command. Modify this as you see fit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>goodmorning<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;updating packages&quot;</span>
</span><span class='line'>  brew update
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;updating any packages&quot;</span>
</span><span class='line'>  brew upgrade
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;cleaning up old packages&quot;</span>
</span><span class='line'>  brew cleanup
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;checking homebrew for errors&quot;</span>
</span><span class='line'>  brew doctor
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;All good!&quot;</span>
</span><span class='line'>  <span class="nb">cd</span> ~/.vim/autoload
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;updating pathogen&quot;</span>
</span><span class='line'>  curl -O https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Pathogen updated!&quot;</span>
</span><span class='line'>  <span class="k">for </span>i in <span class="sb">`</span>ls<span class="sb">`</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="nb">cd</span> <span class="s2">&quot;$i&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;updating $i&quot;</span>
</span><span class='line'>      git pull
</span><span class='line'>      <span class="nb">cd</span> ..
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">cd</span> ~
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;updating RVM&quot;</span>
</span><span class='line'>  rvm get stable
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;cleaning up RVM&quot;</span>
</span><span class='line'>  rvm cleanup all
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Good to go!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this is helpful for you, if so, or if you&rsquo;d like to change anything, let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Gulp Setup]]></title>
    <link href="http://jweaver.me/blog/2014/02/19/basic-gulp-file/"/>
    <updated>2014-02-19T10:23:33-05:00</updated>
    <id>http://jweaver.me/blog/2014/02/19/basic-gulp-file</id>
    <content type="html"><![CDATA[<p><a href="http://www.gulpjs.com">Gulp</a> is a JavaScript task runner designed to automate repetitive tasks in your development workflow, so you can focus on the important things in your app. Gulp is very flexible, but for most of us, there are some things we use in almost all of our projects. Personally, I&rsquo;m always going to use SCSS, minify and lint my JS, and optimize images. To make that easier, I have a basic Gulp file that I use for my projects. This lets me get up and running even more quickly. I thought I&rsquo;d share this with you. Tweak it to your own preferences and workflow, and if you have anything to add let me know!</p>

<!--more-->


<p>First, make sure you have gulp installed globally. Gulp requires <a href="http://www.nodejs.org">Node.js</a>, so if you don&rsquo;t have that install it first. It&rsquo;s easy to install, Mac users can even use Homebrew:</p>

<p><code>brew install node</code></p>

<p>And then:</p>

<p><code>npm install -g gulp</code></p>

<p>This will install the gulp CLI tool and all of it&rsquo;s dependencies globally.</p>

<p>Next, create a <code>package.json</code> file in the root of your project directory. It should look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Your Title&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;gulp&quot;</span><span class="p">:</span> <span class="s2">&quot;~3.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-minify-css&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gulp-sass&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.6.0&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run <code>npm install</code> from your project directory. After that you can create your <code>gulpfile.js</code>, or copy this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minifycss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-css&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sass&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;assets/styles/scss/app.scss&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifycss</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;assets/styles/min&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;assets/libs/foundation/js/foundation.min.js&#39;</span><span class="p">,</span> <span class="s1">&#39;assets/libs/moment/min/moment.min.js&#39;</span><span class="p">])</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;assets/js&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;assets/styles/scss/*.scss&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;css&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a simple setup, designed to watch and compile SCSS files, as well as copy over any necessary packages installed from Bower. Obviously, change your paths to match your project structure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Task Runners: Grunt vs. Gulp]]></title>
    <link href="http://jweaver.me/blog/2014/02/18/task-runners-grunt-vs-gulp/"/>
    <updated>2014-02-18T13:38:13-05:00</updated>
    <id>http://jweaver.me/blog/2014/02/18/task-runners-grunt-vs-gulp</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been a CodeKit user for a pretty long time, and while it&rsquo;s been very useful, the rise of JavaScript task runners like
Grunt and Gulp have given me a chance to rethink how I automate my workflow. CodeKit is great for compiling SASS/LESS and CoffeeScript,
but what it can&rsquo;t do is more project specific tasks, for example, run my tests. Thanks to Node.js, Grunt and Gulp can do everything
CodeKit can, while also having access to the CLI which allows it to automatically run your tests and perform other tasks.</p>

<!--more-->


<p>So that begs the question, Grunt or Gulp? I used Grunt for a while and didn&rsquo;t really see a need to use anything else, it got the
job done. But after I took some time to dig into Gulp, I realized that it was equally powerful but with a much cleaner, more precise
syntax for doing the same things. Let&rsquo;s take the same task, compiling SASS, minifying and concatenating it. In Grunt, that would look
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">sass</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;expanded&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;main.css&#39;</span><span class="o">:</span> <span class="s1">&#39;main.scss&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;widgets.css&#39;</span><span class="o">:</span> <span class="s1">&#39;widgets.scss&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">mincss</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;myproject&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;build/app.min.css&#39;</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;main.css&#39;</span><span class="p">,</span> <span class="s1">&#39;widgets.css&#39;</span> <span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad, but look at how much cleaner all of this can be in Gulp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;assets/styles/scss/app.scss&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifycss</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;assets/styles/min&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s substantially shorter, but how? The answer is in that <code>.pipe</code> method, which allows you to send the result of one task into another.
What this means is that we can put all of our CSS related tasks into one, and just pipe the result of sass compiling into minifying, then minifying
into the destination file. The same is true for JavaScript, images or any other asset. For me, I think it&rsquo;s pretty clear that I&rsquo;ll be using Gulp
as my default task runner for the time being. If you&rsquo;ve been using Grunt, give Gulp a try. I think you&rsquo;ll be surprised by just how much time it can
save you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel is a great framework]]></title>
    <link href="http://jweaver.me/blog/2014/02/16/laravel-is-a-great-framework/"/>
    <updated>2014-02-16T09:28:00-05:00</updated>
    <id>http://jweaver.me/blog/2014/02/16/laravel-is-a-great-framework</id>
    <content type="html"><![CDATA[<p>I recently had to work on a project that required hooking into Magento&rsquo;s SOAP API and parsing orders from an Excel spreadsheet into
the Magento dashboard. Although Magento has a REST API, it doesn&rsquo;t seem to be nearly as capable as the SOAP API, and offers no real
functionality other than the ability to get orders, products, and so on.</p>

<!--more-->


<p>Having never really worked with a SOAP API, I went to my usual framework (Ruby on Rails) and looked for a SOAP gem. I found
<a href="http://savonrb.com/">Savon</a> and thought I would give that a shot. While Savon works for most applications, something about
the way Magento was requiring the request body to be formatted wasn&rsquo;t jiving with how Savon wanted to format it for me.</p>

<h3>Laravel to the Rescue</h3>

<hr />

<p>I decided that I would have to use PHP for this, since PHP has support for SOAP built right in, and also because all of the examples
Magento gave on their site were for PHP. Creating a soap client in PHP is as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SoapClient</span><span class="p">(</span><span class="s1">&#39;your-wsdl-here&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And from there I was able to use the Magento API as documented. Now this doesn&rsquo;t really pertain to Laravel, just PHP in general. But
where Laravel comes in handy is the rest of the application. I&rsquo;ve attempted to learn Laravel in the past (version 3) and wasn&rsquo;t that
into it. Maybe it was just that I wasn&rsquo;t dedicated to it, but I feel that the framework has come a long way in version 4. Routes and
Controllers are incredibly easy to use, and setting them up in a RESTful way is very simple. For example, if you have a Post resource,
then a simple route like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">resource</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">,</span> <span class="s1">&#39;PostsController&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>will link to a controller and automatically accept standard RESTful actions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;posts.index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;posts.create&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and so on. This made building the rest of my application incredibly easy, and the native SOAP support in PHP was simple to use as well.
I&rsquo;ll be using Laravel on future projects, for sure.</p>
]]></content>
  </entry>
  
</feed>
